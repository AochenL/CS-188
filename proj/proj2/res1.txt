Starting on 6-18 at 15:53:59

Question q2
===========

*** PASS: test_cases/q2/0-eval-function-lose-states-1.test
*** PASS: test_cases/q2/0-eval-function-lose-states-2.test
*** PASS: test_cases/q2/0-eval-function-win-states-1.test
*** PASS: test_cases/q2/0-eval-function-win-states-2.test
*** PASS: test_cases/q2/0-lecture-6-tree.test
*** PASS: test_cases/q2/0-small-tree.test
*** PASS: test_cases/q2/1-1-minmax.test
*** PASS: test_cases/q2/1-2-minmax.test
*** PASS: test_cases/q2/1-3-minmax.test
*** PASS: test_cases/q2/1-4-minmax.test
*** PASS: test_cases/q2/1-5-minmax.test
*** PASS: test_cases/q2/1-6-minmax.test
*** PASS: test_cases/q2/1-7-minmax.test
*** PASS: test_cases/q2/1-8-minmax.test
*** FAIL: Exception raised: getScore() called on non-terminal state or before maximum depth achieved.
*** 
*** Traceback (most recent call last):
***   File "/Users/ismart/Downloads/CS 188/proj/proj2/grading.py", line 80, in grade
***     util.TimeoutFunction(getattr(gradingModule, q), 1800)(
***   File "/Users/ismart/Downloads/CS 188/proj/proj2/util.py", line 675, in __call__
***     result = self.function(*args, **keyArgs)
***              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
***   File "/Users/ismart/Downloads/CS 188/proj/proj2/autograder.py", line 308, in <lambda>
***     return lambda grades: question.execute(grades)
***                           ^^^^^^^^^^^^^^^^^^^^^^^^
***   File "/Users/ismart/Downloads/CS 188/proj/proj2/testClasses.py", line 57, in execute
***     if not f(grades):
***            ^^^^^^^^^
***   File "/Users/ismart/Downloads/CS 188/proj/proj2/autograder.py", line 303, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
***   File "multiagentTestClasses.py", line 434, in execute
***     action, generated = self.solveProblem(multiAgents)
***                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
***   File "multiagentTestClasses.py", line 421, in solveProblem
***     action = studentAgent.getAction(self.problem.startState)
***              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
***   File "multiAgents.py", line 163, in getAction
***     bestScore, bestAction = self.minimax(gameState, 0, 0)
***                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
***   File "multiAgents.py", line 179, in minimax
***     return self.maxValue(gameState, depth, agentIndex)
***            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
***   File "multiAgents.py", line 192, in maxValue
***     score, _ = self.minimax(successor, nextDepth, nextAgent)
***                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
***   File "multiAgents.py", line 171, in minimax
***     return self.evaluationFunction(gameState), None
***            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
***   File "multiAgents.py", line 112, in scoreEvaluationFunction
***     return currentGameState.getScore()
***            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
***   File "multiagentTestClasses.py", line 64, in getScore
***     raise Exception(
*** Exception: getScore() called on non-terminal state or before maximum depth achieved.
*** 

### Question q2: 0/5 ###


Finished at 15:53:59

Provisional grades
==================
Question q2: 0/5
------------------
Total: 0/5

Your grades are NOT yet registered.  To register your grades, make sure
to follow your instructor's guidelines to receive credit on your project.

